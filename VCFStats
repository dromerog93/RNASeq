VCFStats <- function(vcf, standard = TRUE, Index = 0.70, QUAL = "", AD = "", sample = "") {
    vcf_stats <- as.data.frame(matrix(rep(0, 9), nrow=1))
    names(vcf_stats) <- c("Sample", "QUAL", "AD",
                        "Variant", "SNP", "INDEL",
                        paste("Variant_I", Index * 100, sep = ""),
                        paste("SNP_I", Index * 100, sep = ""),
                        paste("INDEL_I", Index * 100, sep = ""))
    if (standard){
        fQUAL <- c(0, 20, 30, 0, 0)
        fAD <- c(0, 0, 0, 10, 20)
    }
    if (QUAL[1] != "" & AD[1] != "") {
        if (length(QUAL) != length(AD)) {
            stop("QUAL and AD must have the same length.")
        } else {
            if (standard) {
                fQUAL <- c(c(0, 20, 30, 0, 0), QUAL)
                fAD <- c(c(0, 0, 0, 10, 20), AD)
            } else {
                fQUAL <- QUAL
                fAD <- AD
            }
        }
    } else {
        if (standard) {
            fQUAL <- c(0, 20, 30, 0, 0)
            fAD <- c(0, 0, 0, 10, 20)
        } else {
            message("No filter has been chosen.")
            fQUAL <- 0
            fAD <- 0
        }
    }

    n_filter <- length(fQUAL)

    if (sample == ""){
        n_sample <- as.integer(length(grep("AD",colnames(vcf))) / 2)
        sample <- rep("Sample", n_sample)
        for (i in 1:n_sample) {
            sample[i] <- paste(sample[i], i, sep = "_")
        }
    } else {
        n_sample <- length(sample)
    }

    for (i in 1:n_sample) {
        adref <- grep("AD_REF", colnames(vcf))
        adalt <- grep("AD_ALT", colnames(vcf))
        for (j in 1:n_filter) {
            vcf_stats[(i - 1) * n_filter + j, 1] <- sample[i]
            vcf_stats[(i - 1) * n_filter + j, 2] <- fQUAL[j]
            vcf_stats[(i - 1) * n_filter + j, 3] <- fAD[j]
            vcf_stats[(i - 1) * n_filter + j, 4] <- nrow(vcf[vcf$QUAL >= fQUAL[j] &
                                                        vcf[, colnames(vcf)[adref[i]]] + vcf[, colnames(vcf)[adalt[i]]] >= fAD[j], ])
            vcf_stats[(i - 1) * n_filter + j, 5] <- nrow(vcf[vcf$VARIANT == "SNP" &
                                                        vcf$QUAL >= fQUAL[j] &
                                                        vcf[, colnames(vcf)[adref[i]]] + vcf[, colnames(vcf)[adalt[i]]] >= fAD[j], ])
            vcf_stats[(i - 1) * n_filter + j, 6] <- nrow(vcf[vcf$VARIANT == "INDEL" &
                                                        vcf$QUAL >= fQUAL[j] &
                                                        vcf[, colnames(vcf)[adref[i]]] + vcf[, colnames(vcf)[adalt[i]]] >= fAD[j], ])
            vcf_stats[(i - 1) * n_filter + j, 7] <- nrow(vcf[vcf$QUAL >= fQUAL[j] &
                                                        vcf[, colnames(vcf)[adref[i]]] + vcf[, colnames(vcf)[adalt[i]]] >= fAD[j] &
                                                        vcf[, colnames(vcf)[adalt[i]]] / (vcf[, colnames(vcf)[adref[i]]] + vcf[, colnames(vcf)[adalt[i]]]) >= Index, ])
            vcf_stats[(i - 1) * n_filter + j, 8] <- nrow(vcf[vcf$VARIANT == "SNP" &
                                                        vcf$QUAL >= fQUAL[j] &
                                                        vcf[, colnames(vcf)[adref[i]]] + vcf[, colnames(vcf)[adalt[i]]] >= fAD[j] &
                                                        vcf[, colnames(vcf)[adalt[i]]] / (vcf[, colnames(vcf)[adref[i]]] + vcf[, colnames(vcf)[adalt[i]]]) >= Index, ])
            vcf_stats[(i - 1) * n_filter + j, 9] <- nrow(vcf[vcf$VARIANT == "INDEL" &
                                                        vcf$QUAL >= fQUAL[j] &
                                                        vcf[, colnames(vcf)[adref[i]]] + vcf[, colnames(vcf)[adalt[i]]] >= fAD[j] &
                                                        vcf[, colnames(vcf)[adalt[i]]] / (vcf[, colnames(vcf)[adref[i]]] + vcf[, colnames(vcf)[adalt[i]]]) >= Index, ])
        }
    }

    return(vcf_stats)
}
